// Generated by gencpp from file takktile_ros/RobotiqTouch.msg
// DO NOT EDIT!


#ifndef TAKKTILE_ROS_MESSAGE_ROBOTIQTOUCH_H
#define TAKKTILE_ROS_MESSAGE_ROBOTIQTOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace takktile_ros
{
template <class ContainerAllocator>
struct RobotiqTouch_
{
  typedef RobotiqTouch_<ContainerAllocator> Type;

  RobotiqTouch_()
    : f0()
    , f1()
    , f2()  {
    }
  RobotiqTouch_(const ContainerAllocator& _alloc)
    : f0(_alloc)
    , f1(_alloc)
    , f2(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _f0_type;
  _f0_type f0;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _f1_type;
  _f1_type f1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _f2_type;
  _f2_type f2;





  typedef boost::shared_ptr< ::takktile_ros::RobotiqTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::takktile_ros::RobotiqTouch_<ContainerAllocator> const> ConstPtr;

}; // struct RobotiqTouch_

typedef ::takktile_ros::RobotiqTouch_<std::allocator<void> > RobotiqTouch;

typedef boost::shared_ptr< ::takktile_ros::RobotiqTouch > RobotiqTouchPtr;
typedef boost::shared_ptr< ::takktile_ros::RobotiqTouch const> RobotiqTouchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::takktile_ros::RobotiqTouch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::takktile_ros::RobotiqTouch_<ContainerAllocator1> & lhs, const ::takktile_ros::RobotiqTouch_<ContainerAllocator2> & rhs)
{
  return lhs.f0 == rhs.f0 &&
    lhs.f1 == rhs.f1 &&
    lhs.f2 == rhs.f2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::takktile_ros::RobotiqTouch_<ContainerAllocator1> & lhs, const ::takktile_ros::RobotiqTouch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace takktile_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::takktile_ros::RobotiqTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::takktile_ros::RobotiqTouch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::takktile_ros::RobotiqTouch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "234fe178cd7a49e08b0a65ebe3a3936d";
  }

  static const char* value(const ::takktile_ros::RobotiqTouch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x234fe178cd7a49e0ULL;
  static const uint64_t static_value2 = 0x8b0a65ebe3a3936dULL;
};

template<class ContainerAllocator>
struct DataType< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "takktile_ros/RobotiqTouch";
  }

  static const char* value(const ::takktile_ros::RobotiqTouch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message format for raw sensor data\n"
"float32[] f0\n"
"float32[] f1\n"
"float32[] f2\n"
;
  }

  static const char* value(const ::takktile_ros::RobotiqTouch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.f0);
      stream.next(m.f1);
      stream.next(m.f2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotiqTouch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::takktile_ros::RobotiqTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::takktile_ros::RobotiqTouch_<ContainerAllocator>& v)
  {
    s << indent << "f0[]" << std::endl;
    for (size_t i = 0; i < v.f0.size(); ++i)
    {
      s << indent << "  f0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.f0[i]);
    }
    s << indent << "f1[]" << std::endl;
    for (size_t i = 0; i < v.f1.size(); ++i)
    {
      s << indent << "  f1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.f1[i]);
    }
    s << indent << "f2[]" << std::endl;
    for (size_t i = 0; i < v.f2.size(); ++i)
    {
      s << indent << "  f2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.f2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAKKTILE_ROS_MESSAGE_ROBOTIQTOUCH_H
